<script type="text/javascript">
	// delete console;
	
	var indexaWindowHasLoaded = false;
	var indexaCurrentColor = false;
	var indexaInterval = false;

	
	// todo o json do bloco view de cada produto, renderizado
    var indexaOtherColors = <?php echo $this->getJsonProductsViews() ?>;

    // div que terá o conteúdo substituido
    var indexaViewDiv = "product_container";

	
	// cria mecanismo para saber se o evento window.load já foi chamado
	Event.observe(window,'load', function () {
		indexaWindowHasLoaded = true;
	});

	// callback de ativação do zoom
	// executado somente após as imagens serem carregadas
    function indexaAtivaZoom ()
    {
    	// aqui deve-se adicionar o script que ativa o zoom
    	// ou qualquer outro callback que deve ser executado somente após as imagens serem carregadas
    	product_zoom = new Product.Zoom('image', 'track', 'handle', 'zoom_in', 'zoom_out', 'track_hint');
    }

    // funcao que chega a cada X milisegundos se as imagens já foram carregadas
    function indexaIntervalCarregamentoImagens ()
    {
    	var real_div = $(indexaViewDiv);
    	var indexaCurrentImagesArray = real_div.getElementsByTagName('img');
    	
		for (var i in indexaCurrentImagesArray)
		{
			if (typeof indexaCurrentImagesArray[i] == 'object')
			{
				// imagens já foram carregadas?
				if (indexaCurrentImagesArray[i].complete == false) return false; 
			}
		}

		// script que ativa o ZOOM
		indexaAtivaZoom ();
		
		window.clearInterval(indexaInterval);
		indexaInterval = false;
    }

	// callback executado após mudança no div
    // adiciona outros scripts para serem executados após a mudança de produtos
	function indexaonColorChangeCallback()
	{
		// renova os comentários do facebook
		// http://stackoverflow.com/questions/9862742/facebook-comments-iframe-updating-when-there-is-no-page-refresh-e-g-ajax
		FB.XFBML.parse();

		// re-ativa os links de adicionar ao carrinho do AJAX CART
		// snippet retirado de /js/aw_ajaxcartpro/ajaxcartpro-1.4.6.js - linha 153
		if(!Prototype.Browser.IE6){

		    var cnt1 = 20;
		    __intId = setInterval(
		        /* Hangs event listener for @ADD TO CART@ links*/
		        function(){
		            cnt1--;
		            if(typeof productAddToCartForm != 'undefined'){
		                try {
		                    // This fix is applied to magento <1.3.1
		                    $$('#product_addtocart_form '+aw_addToCartButtonClass).each(function(el){
		                        el.setAttribute('type', 'button')
		                    })
		                }catch(err){

		                }
		                
		                if (AW_ACP.hasFileOption == false) addSubmitEvent();
		                
		                clearInterval(__intId);
		            }
		            if(!cnt1) clearInterval(__intId);
		        },
		        500
		        );



		    var cnt2 = 20;
		    __intId2 = setInterval(
		        /* This hangs event listener on @DELETE@ items from cart*/
		        function(){    
		            cnt2--;
		            if(typeof aw_cartDivClass!= 'undefined' && $$(aw_cartDivClass).length || ((typeof AW_ACP !== 'undefined') && AW_ACP.isCartPage)){
		                updateDeleteLinks();
		                clearInterval(__intId2);
		            }
		            if(!cnt2) clearInterval(__intId);
		        },
		        500
		        );
		}
	}
    
	function indexaColorsChangeProduct(id, callback)
	{
		
		if (!indexaWindowHasLoaded) { return; }
		if (!(id > 0)) { return; }
		
		// não continua se já for a imagem atual
		if (id == indexaCurrentColor)
		{
			return;
		}

		
		indexaCurrentColor = id;
		indexaCurrentImagesComplete = 0;
		indexaCurrentImagesArray = [];
		
		// pega o bloco html correspondente deste id do produto
		html = "";
		if (id in indexaOtherColors)
		{
			html = indexaOtherColors[id];
		}

		
		// se conseguimos, então vamos tentar fazer a mudança
		if (html.length > 0)
		{

			
			// remove o div que vem junto com o bloco
			// pois iremos inserir no div product_container já existente
			var final_html = html
				.sub("\n<div id=\"product_container\">\n\n", ' ')
				.sub("\n\n<\/div>", ' ');

			
			// substitui o conteúdo do div do produto com o bloco do produto novo
			var real_div = $(indexaViewDiv);
			real_div.update(final_html);


			// precisamos pegar os scripts correspondentes, para isso geramos um dom do html vindo do json
			// criamos um elemento div
			var div = document.createElement('div');
			div.innerHTML = final_html;

			// pegamos todas as tags scripts
			var scripts = div.getElementsByTagName('script');
			var final_script = "";

			// concatenando todos os scripts da região
			for (i in scripts)
			{
				try {
					if (typeof scripts[i].innerHTML == 'string')
					{
						final_script += " " + scripts[i].innerHTML;
					}
				}
				catch (e)
				{
				}
			}

			// tirando todas as palavras "var" para que o script assuma o escopo global dentro da funcao
			final_script = final_script.gsub("var ", ' ');
			
			
			// script fica verificando se as imagens do novo produto já foram carregadas
			indexaInterval = window.setInterval(indexaIntervalCarregamentoImagens, 250);
			indexaIntervalCarregamentoImagens();
			

			// funcao que será chamada para ativar este produto
			var call_script = "indexaActivateProduct ();";
			
			// criando a funcao que será chamada
		    final_script = "function indexaActivateProduct () { " + final_script + " indexaonColorChangeCallback(); }";

		    if(callback) callback();

		    // declara e chama a função
			eval (final_script);
			eval (call_script);
		}
	}
</script>