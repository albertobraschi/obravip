<?phprequire_once 'Zend/Log.php';/** * Indexa - Gwap Payment Module * * @title      Magento -> Custom Payment Module for Gwap * @category   Payment Gateway * @package    Indexa_Gwap * @author     Indexa Development Team -> desenvolvimento [at] indexainternet [dot] com  [dot] br * @copyright  Copyright (c) 2011 Indexa - http://www.indexainternet.com.br * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0) */class Indexa_Gwap_Model_Methods_Cc extends Mage_Payment_Model_Method_Cc {    const PAYMENT_TYPE_AUTH = 'AUTHORIZATION';    const PAYMENT_TYPE_SALE = 'SALE';    protected $_code = 'gwap_cc';    protected $_formBlockType = 'gwap/form_cc';    protected $_infoBlockType = 'payment/info_cc';    protected $_allowCurrencyCode = array('BRL', 'USD');    protected $_canSaveCc = false;    /**     * Assign data to info model instance     *     * @param   mixed $data     * @return  Mage_Payment_Model_Info     */    public function assignData($data) {        if (!($data instanceof Varien_Object)) {            $data = new Varien_Object($data);        }        $info = $this->getInfoInstance();        $info->setCcType($data->getGwapCcCcType())                ->setCcOwner($data->getGwapCcCcOwner())                ->setCcLast4(substr($data->getGwapCcCcNumber(), -4))                ->setCcNumber($data->getGwapCcCcNumber())                ->setCcCid($data->getGwapCcCcCid())                ->setCcExpMonth($data->getGwapCcCcExpMonth())                ->setCcParcelas($data->getGwapCcCcParcelas())                ->setCcExpYear($data->getGwapCcCcExpYear())                ->setCcSsIssue($data->getGwapCcCcSsIssue())                ->setCcSsStartMonth($data->getGwapCcCcSsStartMonth())                ->setCcSsStartYear($data->getGwapCcCcSsStartYear())        ;        return $this;    }    /**     * Using internal pages for input payment data     *     * @return bool     */    public function canUseInternal() {        return false;    }    /**     *  get Gwap system configuration     *      * @return Varien_Object      */    public function getConfig() {        return new Varien_Object(Mage::getStoreConfig('payment/gwap_cc'));    }    /**     *  get Gwap auth system configuration     *      * @return Varien_Object      */    public function getAuthConfig() {        return new Varien_Object(Mage::getStoreConfig('payment/gwap_auth'));    }    /**     * Authorize     *     * @param   Varien_Object $orderPayment     * @param float $amount     * @return  Mage_Payment_Model_Abstract     */    public function authorize(Varien_Object $payment, $amount) {        //$gwapCollection = Mage::getModel('gwap/order')->getCollection()->addStatusFilter(Indexa_Gwap_Model_Order::STATUS_CREATED);        $config = $this->getConfig();        $auth = $this->getAuthConfig();        $gwap = Mage::getModel('gwap/order')->load( $payment->getOrder()->getId(), 'order_id' );                        $data = new Varien_Object(unserialize(Mage::helper('core')->decrypt($gwap->getInfo())));        //load order ID        $order = $payment->getOrder();        $url = '';        if ($auth->getAmbiente() == 'LIVE') {            $url = "https://ctpe.net/frontend/payment.prc";        } elseif ($auth->getAmbiente() == 'CONNECTOR_TEST') {            $url = "https://test.ctpe.net/frontend/payment.prc";        }        //prepare parameters        $parameters['RESPONSE.VERSION'] = '1.0';        $parameters['TRANSACTION.MODE'] = $auth->getAmbiente();        $parameters['TRANSACTION.RESPONSE'] = 'SYNC';        $parameters['SECURITY.SENDER'] = trim($auth->getSecuritySender());        $channel = 'transaction_channel_' . $config->getChannel();                $parameters['TRANSACTION.CHANNEL'] = trim( $config->getData($channel) );        $parameters['USER.LOGIN'] = trim($auth->getUserLogin());        $parameters['USER.PWD'] = strval(Mage::helper("core")->decrypt($auth->getUserPwd()));        $parameters['IDENTIFICATION.TRANSACTIONID'] = $order->getIncrementId();        $parameters['ACCOUNT.HOLDER'] = $data->getCcOwner();        $parameters['ACCOUNT.NUMBER'] = $data->getCcNumber();        $parameters['ACCOUNT.BRAND'] = $data->getCcType();        $parameters['ACCOUNT.EXPIRY_MONTH'] = $data->getCcExpMonth();        $parameters['ACCOUNT.EXPIRY_YEAR'] = $data->getCcExpYear();        $parameters['ACCOUNT.VERIFICATION'] = $data->getCcCid();                if( $data->getCcParcelas() > 1 ){            $parameters['CRITERION.CUSTOM_number_of_installments'] = $data->getCcParcelas();        }                $parameters['PAYMENT.CODE'] = $config->getAcao() ? 'CC.DB' : 'CC.PA';        $parameters['PRESENTATION.AMOUNT'] = number_format($order->getGrandTotal(), 2, '.', '');        $parameters['PRESENTATION.CURRENCY'] = "BRL";        $street = utf8_decode($order->getShippingAddress()->getStreet(1));        if (strlen($street) < 5) {            $street = 'Rua ' . utf8_decode($order->getShippingAddress()->getStreet(1));        }        $parameters['ADDRESS.STREET'] = $street;        $parameters['ADDRESS.ZIP'] = str_replace('-', '', utf8_decode($order->getShippingAddress()->getPostcode()));        $parameters['ADDRESS.CITY'] = utf8_decode($order->getShippingAddress()->getCity());        $parameters['ADDRESS.COUNTRY'] = utf8_decode($order->getShippingAddress()->getCountryId());        $parameters['ADDRESS.STATE'] = $order->getShippingAddress()->getRegion();        $parameters['CONTACT.EMAIL'] = utf8_decode($order->getShippingAddress()->getEmail());        $parameters['NAME.GIVEN'] = utf8_decode($order->getShippingAddress()->getFirstname());        $parameters['NAME.FAMILY'] = utf8_decode($order->getShippingAddress()->getLastname());                if( $config->getAcao() ){            $gwap->setInfo(Mage::helper('core')->encrypt(serialize($parameters)));            $gwap->save();            return $this;        }                //building the postparameter string to send into the WPF        foreach (array_keys($parameters) AS $key) {            if (!isset($$key)) {                $$key = '';            }            if (!isset($result)) {                $result = '';            }            $$key .= $parameters[$key];            $$key = urlencode($$key);            $$key .= "&";            if (!stristr($key, 'cpf') && !stristr($key, 'number_of_installments')) {                $var = strtoupper($key);            } else {                $var = $key;            }            $value = $$key;            $result .= "$var=$value";        }        $strPOST = stripslashes($result);        // open the request url for the Web Payment Frontend        $cpt = curl_init();        curl_setopt($cpt, CURLOPT_URL, $url);        curl_setopt($cpt, CURLOPT_SSL_VERIFYHOST, 2);        curl_setopt($cpt, CURLOPT_USERAGENT, "php ctpepost");        curl_setopt($cpt, CURLOPT_RETURNTRANSFER, 1);        curl_setopt($cpt, CURLOPT_SSL_VERIFYPEER, FALSE);        curl_setopt($cpt, CURLOPT_POST, 1);        curl_setopt($cpt, CURLOPT_POSTFIELDS, $strPOST);        $curlresultURL = curl_exec($cpt);        $curlerror = curl_error($cpt);        $curlinfo = curl_getinfo($cpt);        curl_close($cpt);        $r_arr = explode("&", $curlresultURL);        foreach ($r_arr AS $buf) {            $temp = urldecode($buf);            $temp = explode("=", $temp, 2);            $postatt = $temp[0];            $postvar = $temp[1];            $returnvalue[$postatt] = $postvar;        }                $resultCode = explode('.', $returnvalue['PROCESSING.CODE']);        // validate Pre authorization - 90 success code        if ($resultCode[2] != '90') {            Mage::throwException(Mage::helper('gwap')->__($returnvalue['PROCESSING.REASON'] . ' - ' . $returnvalue['PROCESSING.RETURN']));            return $this;        }        // prepare parameters to capture after Pre Authorize success                    $captureParams['RESPONSE.VERSION'] = '1.0';        $captureParams['TRANSACTION.MODE'] = $auth->getAmbiente();        $captureParams['TRANSACTION.RESPONSE'] = 'SYNC';        $captureParams['SECURITY.SENDER'] = trim($auth->getSecuritySender());        $captureParams['TRANSACTION.CHANNEL'] = trim( $config->getData($channel) );        $captureParams['USER.LOGIN'] = trim($auth->getUserLogin());        $captureParams['USER.PWD'] = strval(Mage::helper("core")->decrypt($auth->getUserPwd()));        $captureParams['IDENTIFICATION.REFERENCEID'] = $returnvalue['IDENTIFICATION.UNIQUEID'];        $captureParams['IDENTIFICATION.TRANSACTIONID'] = $returnvalue['IDENTIFICATION.TRANSACTIONID'];        $captureParams['PAYMENT.CODE'] = "CC.CP";        $captureParams['PRESENTATION.AMOUNT'] = $returnvalue['PRESENTATION.AMOUNT'];        $captureParams['PRESENTATION.CURRENCY'] = "BRL";        $gwap->setInfo(Mage::helper('core')->encrypt(serialize($captureParams)));        $gwap->save();                return $this;    }    /**     * Capture     *     * @param   Varien_Object $orderPayment     * @param float $amount     * @return  Mage_Payment_Model_Abstract     */    public function capture(Varien_Object $payment, $amount) {        $gwap = Mage::getModel('gwap/order')->load( $payment->getOrder()->getId(), 'order_id' );                if( $gwap->getStatus() == Indexa_Gwap_Model_Order::STATUS_CREATED ){                        $this->authorize($payment, $amount);            /**             * reload item             */            $gwap->clearInstance();            $gwap = Mage::getModel('gwap/order')->load( $payment->getOrder()->getId(), 'order_id' );                    $gwap->setStatus(Indexa_Gwap_Model_Order::STATUS_CAPTUREPAYMENT);            $gwap->save();                    }                $config = $this->getConfig();        $auth = $this->getAuthConfig();                $url = '';        if ($auth->getAmbiente() == 'LIVE') {            $url = "https://ctpe.net/frontend/payment.prc";        } elseif ($auth->getAmbiente() == 'CONNECTOR_TEST') {            $url = "https://test.ctpe.net/frontend/payment.prc";        }        $data = new Varien_Object(unserialize(Mage::helper('core')->decrypt($gwap->getInfo())));        $parameters = $data->toArray();                //building the post parameter                 foreach (array_keys($parameters) AS $key) {            if (!isset($$key)) {                $$key = '';            }            if (!isset($result)) {                $result = '';            }            $$key .= $parameters[$key];            $$key = urlencode($$key);            $$key .= "&";            if (!stristr($key, 'cpf') && !stristr($key, 'number_of_installments')) {                $var = strtoupper($key);            } else {                $var = $key;            }            $value = $$key;            $result .= "$var=$value";        }        $strPOST = stripslashes($result);        // open the request url for the Web Payment Frontend        $cpt = curl_init();        curl_setopt($cpt, CURLOPT_URL, $url);        curl_setopt($cpt, CURLOPT_SSL_VERIFYHOST, 2);        curl_setopt($cpt, CURLOPT_USERAGENT, "php ctpepost");        curl_setopt($cpt, CURLOPT_RETURNTRANSFER, 1);        curl_setopt($cpt, CURLOPT_SSL_VERIFYPEER, FALSE);        curl_setopt($cpt, CURLOPT_POST, 1);        curl_setopt($cpt, CURLOPT_POSTFIELDS, $strPOST);        $curlresultURL = curl_exec($cpt);        $curlerror = curl_error($cpt);        $curlinfo = curl_getinfo($cpt);        curl_close($cpt);        $r_arr = explode("&", $curlresultURL);        foreach ($r_arr AS $buf) {            $temp = urldecode($buf);            $temp = explode("=", $temp, 2);            $postatt = $temp[0];            $postvar = $temp[1];            $returnvalue[$postatt] = $postvar;        }                $resultCode = explode('.', $returnvalue['PROCESSING.CODE']);        // validate Pre authorization - 90 success code        if ($resultCode[2] != '90') {            Mage::getSingleton('adminhtml/session')->addError($this->__('Invoice capturing error.' . $returnvalue['PROCESSING.REASON'] . ' - ' . $returnvalue['PROCESSING.RETURN']));            Mage::throwException(Mage::helper('gwap')->__($returnvalue['PROCESSING.REASON'] . ' - ' . $returnvalue['PROCESSING.RETURN']));            return $this;        }                $gwap->setStatus(Indexa_Gwap_Model_Order::STATUS_CAPTURED);        $gwap->setErrorCode(null);        $gwap->setErrorMessage(null);        $gwap->setInfo(null);        $gwap->setTries(0);        $gwap->setAbandoned(0);        $gwap->save();                return $this;    }    /**     * Using for multiple shipping address     *     * @return bool     */    public function canUseForMultishipping() {        return false;    }    /**     *  check if capture is available     *      * @return bool     */    public function canCapture() {        return true;    }    /**     * Using for multiple shipping address     *     */    public function createFormBlock($name) {        $block = $this->getLayout()->createBlock($this->_formBlockType, $name)                ->setMethod('gwap_cc')                ->setPayment($this->getPayment())                ->setTemplate('gwap/cc/form.phtml');        return $block;    }    /**     * Get Frontend name by Code     *     * @return frontendNameString or $code if not found     */    public function getFrontendName($code) {        foreach ($this->_isParcelamento["frontend"] as $arCode => $nFrontend)            if ($code == $arCode)                return $nFrontend;        foreach ($this->_isBoleto["frontend"] as $arCode => $nFrontend)            if ($code == $arCode)                return $nFrontend;        foreach ($this->_isDebito["frontend"] as $arCode => $nFrontend)            if ($code == $arCode)                return $nFrontend;        return $code;    }    /**     * Get gwap session namespace     *     * @return Indexa_Gwap_Model_Session     */    public function getSession() {        return Mage::getSingleton('gwap/session');    }    /**     * Get checkout session namespace     *     * @return Mage_Checkout_Model_Session     */    public function getCheckout() {        return Mage::getSingleton('checkout/session');    }    /**     * Get current quote     *     * @return Mage_Sales_Model_Quote     */    public function getQuote() {        return $this->getCheckout()->getQuote();    }    /**     * Some process when invoice is created     *      * @param Mage_Sales_Model_Invoice_Payment $payment     * @return Indexa_Gwap_Model_Methods_Cc      */    public function onInvoiceCreate(Mage_Sales_Model_Invoice_Payment $payment) {        return $this;    }    /**     * Some process when order is validated     *      * @param Mage_Sales_Model_Invoice_Payment $payment     * @return Indexa_Gwap_Model_Methods_Cc      */    public function onOrderValidate(Mage_Sales_Model_Order_Payment $payment) {        return $this;    }    /**     *  Regex validations     *      * @return string      */    public function getVerificationRegEx() {        $verificationExpList = array(            'VISA' => '/^[0-9]{3}$/',            'MASTER' => '/^[0-9]{3}$/',            'ELO' => '/^[0-9]{3,4}$/',            'DISCOVER' => '/^[0-9]{3,4}$/',            'DINERS' => '/^[0-9]{3,4}$/'        );        return $verificationExpList;    }    public function OtherCcType($type)    {        return $type=='ELO';    }        /*     * Validate     */    public function validate() {        /*         * calling parent validate function         */        $info = $this->getInfoInstance();        if ($info instanceof Mage_Sales_Model_Order_Payment) {            $billingCountry = $info->getOrder()->getBillingAddress()->getCountryId();        } else {            $billingCountry = $info->getQuote()->getBillingAddress()->getCountryId();        }        if (!$this->canUseForCountry($billingCountry)) {            Mage::throwException($this->_getHelper()->__('Selected payment type is not allowed for billing country.'));        }        $errorMsg = false;        $availableTypes = explode(',', $this->getConfigData('cctypes'));        $ccNumber = $info->getCcNumber();        // remove credit card number delimiters such as "-" and space        $ccNumber = preg_replace('/[\-\s]+/', '', $ccNumber);        $info->setCcNumber($ccNumber);        $ccType = '';        if (in_array($info->getCcType(), $availableTypes)) {            if ($this->validateCcNum($ccNumber)                    // Other credit card type number validation                    || ($this->OtherCcType($info->getCcType()) && $this->validateCcNumOther($ccNumber))) {                $ccType = 'ELO';                $ccTypeRegExpList = array(                    'VISA' => '/^4[0-9]{12}([0-9]{3})?$/',                    'MASTER' => '/^5[1-5][0-9]{14}$/',                    'DINERS'  => '/^3[0,6,8][0-9]{12}/',                    'DISCOVER'  => '/^6011[0-9]{4}[0-9]{4}[0-9]{4}$/'                );                foreach ($ccTypeRegExpList as $ccTypeMatch => $ccTypeRegExp) {                    if (preg_match($ccTypeRegExp, $ccNumber)) {                        $ccType = $ccTypeMatch;                        break;                    }                }                                if (!$this->OtherCcType($info->getCcType()) && $ccType != $info->getCcType()) {                    $errorMsg = $this->_getHelper()->__('Credit card number mismatch with credit card type.');                }            } else {                $errorMsg = $this->_getHelper()->__('Invalid Credit Card Number');            }        } else {            $errorMsg = $this->_getHelper()->__('Credit card type is not allowed for this payment method.');        }        //validate credit card verification number        if ($errorMsg === false && $this->hasVerification()) {            $verifcationRegEx = $this->getVerificationRegEx();            $regExp = isset($verifcationRegEx[$info->getCcType()]) ? $verifcationRegEx[$info->getCcType()] : '';            if (!$info->getCcCid() || !$regExp || !preg_match($regExp, $info->getCcCid())) {                $errorMsg = $this->_getHelper()->__('Please enter a valid credit card verification number.');            }        }        if ($ccType != 'SS' && !$this->_validateExpDate($info->getCcExpYear(), $info->getCcExpMonth())) {            $errorMsg = $this->_getHelper()->__('Incorrect credit card expiration date.');        }        if ($errorMsg) {            Mage::throwException($errorMsg);            //throw Mage::exception('Mage_Payment', $errorMsg, $errorCode);        }        //This must be after all validation conditions        if ($this->getIsCentinelValidationEnabled()) {            $this->getCentinelValidator()->validate($this->getCentinelValidationData());        }    }}